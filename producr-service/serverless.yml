# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: shop-app-backend-serverless
frameworkVersion: '2'
plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-auto-swagger

environment:
    SNS_ARN:
      Ref: SNSTopic

iamRoleStatements:
  - Effect: "Allow"
    Action: "sqs:*"
    Resource:
      - "${cf:import-service-${env:STAGE}.NewProductSQSQueueArn}"
  - Effect: "Allow"
    Action: "sns:*"
    Resource:
      Ref: SNSTopic

resources:
  Resources:
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_SUBSCRIPTION_EMAIL}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          IsExpensive:
            - "false"
    SNSSubscription1:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_SUBSCRIPTION_EMAIL_FOR_EXPENSIVE_PRODUCTS}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          IsExpensive:
            - "true"

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  environment:
    PGHOST: ${file(./config.${opt:stage, 'dev'}.json):PGHOST}
    PGPORT: ${file(./config.${opt:stage, 'dev'}.json):PGPORT}
    PGUSER: ${file(./config.${opt:stage, 'dev'}.json):PGUSER}
    PGPASSWORD: ${file(./config.${opt:stage, 'dev'}.json):PGPASSWORD}
    PGDATABASE: ${file(./config.${opt:stage, 'dev'}.json):PGDATABASE}



# you can define service wide environment variables here
#  environment:
#    variable1: value1

functions:
  getProductsList:
    handler: src/list_handler.getProductsList
    events:
      - http:
          path: /products
          method: get
          cors: true

  getProductsById:
    handler: src/product_handler.getProductsById
    events:
      - http:
          path: /products/{productId}
          method: get
          cors: true

  createProduct:
    handler: src/create_handler.createProduct
    events:
      - http:
          path: /products
          method: POST
          cors: true

  catalogBatchProcess:
    handler: src/catalog_handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            - "${cf:import-service-${env:STAGE}.NewProductSQSQueueArn}"
  

